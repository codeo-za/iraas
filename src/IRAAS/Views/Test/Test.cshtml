@using IRAAS
@using IRAAS.ImageProcessing
@addTagHelper "*, Microsoft.AspNet.Mvc.TagHelpers"
@addTagHelper "*, IRAAS"
@model IRAAS.IAppSettings

@{
    ViewBag.Title = "title";
}

<style>
    body {
        font-size: 14px;
    }

    div.row {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }

    div.label {
        grid-column: 1;
    }

    div.input {
        grid-column: 2;
    }

    select, input {
        min-width: 200px;
        padding: 3px;
    }

    div.wrapper {
        display: inline-block;
        padding: 0 10px 0 10px;
    }

    img[src=""] {
        display: none;
    }

    .hidden {
        display: none;
    }

    table {
    }

    legend {
        user-select: none;
        text-decoration: underline;
        cursor: pointer;
        color: LinkText;
    }

    fieldset {
        margin: 10px;
    }

    fieldset.no-border {
        border: none;
    }
</style>
<script type="text/javascript">
    function $$(selector, src) {
        var result = Array.from((src || document).querySelectorAll(selector));
        switch (result.length) {
            case 0:
                return null;
            case 1:
                return result[0];
            default:
                return result;
        }
    }

    function update() {
        var originalUrl = $$("#url").value;
        if (!originalUrl) {
            alert("please paste in an image url first!");
            $$("#url").focus();
            return;
        }
        console.log("fetch for", originalUrl);

        var form = $$("form");
        var inputs = $$("input,select", form);
        var params = inputs.reduce(function (acc, cur) {
            if (cur.value) {
                acc.push({
                    name: cur.name,
                    value: cur.value
                });
            }
            return acc;
        }, []);
        var url = [
            window.location.protocol,
            "//",
            window.location.host,
            "/",
            generateQueryParamsFrom(params)
        ].join("");
        $$("#original").src = originalUrl;
        $$("#original-frame").classList.remove("hidden");
        $$("#resized").src = url;
        $$("#resized-frame").classList.remove("hidden");
        $$("#resized-url").href = url;
        $$("#resized-url").innerText = url;
    }

    function generateQueryParamsFrom(params) {
        if (params.length === 0) {
            return "";
        }
        // cache-busting
        params.push({
            name: "t",
            value: Date.now()
        });
        return "?" + params.map(function (p) {
            return [
                encodeURIComponent(p.name),
                encodeURIComponent(p.value)
            ].join("=")
        }).join("&");
    }

    function watch() {
        console.log("watching...");
        var observer = new MutationObserver(function (changes) {
            changes.forEach(function (change) {
                if (change.type !== "attributes" || change.attributeName !== "src") {
                    return;
                }
                var img = change.target;
                console.log("fetching size of image");
                fetch("", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        url: img.src
                    })
                }).then(function (response) {
                    response.json().then(function (data) {
                        $$("#" + img.id + "-size").innerText = data + " bytes";
                        console.log({
                            data: data,
                            src: img.src
                        });
                    });
                });
            });
        });
        observer.observe(document, {
            childList: true,
            subtree: true,
            attributes: true
        });
    }

    function toggleConfigurationVisibility() {
        var table = $$("#configuration-table");
        var fieldset = $$("#configuration-fieldset");
        if (table.classList.contains("hidden")) {
            table.classList.remove("hidden");
            fieldset.classList.remove("no-border");

        } else {
            table.classList.add("hidden");
            fieldset.classList.add("no-border");
        }
    }
    
    document.addEventListener("DOMContentLoaded", () => {
        $$("#iraas-configuration").addEventListener(
            "click", 
            toggleConfigurationVisibility
        );
    });

    watch();
</script>

<h2>Image Resize As A Service</h2>
<fieldset id="configuration-fieldset" class="no-border">
    <legend id="iraas-configuration">Current IRAAS configuration</legend>
    @{
        var settingsProps = typeof(IAppSettings).GetProperties();
        <table id="configuration-table" class="hidden">
            @foreach (var prop in settingsProps)
            {
                <tr>
                    <td>@prop.Name</td>
                    <td>@prop.GetValue(Model)</td>
                </tr>
            }
        </table>}
</fieldset>

<form onsubmit="return false;">
    @{
        var optionProps = typeof(ImageResizeOptions).GetProperties()
            .Where(pi => pi.CanWrite);
        @foreach (var prop in optionProps)
        {
            <div class="wrapper">
                <image-resize-option prop="@prop"></image-resize-option>
            </div>
        }
    }
    <button onclick="update()">Update</button>
</form>


<fieldset id="resized-frame" class="hidden">
    <legend>Resized image</legend>
    <img id="resized" title="resized image"/>
    <div>
        <a id="resized-url"></a>
    </div>
    <div id="resized-size"></div>
</fieldset>
<fieldset id="original-frame" class="hidden">
    <legend id="original-image-legend">Original image</legend>
    <img id="original" title="original image"/>
    <div id="original-size"></div>
</fieldset>